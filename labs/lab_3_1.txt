(define (equation x) (- (* x x) (cos x))) ; визначаємо функцію підінтегрального виразу

(define (simple_iteration a e) ; визначаємо функцію, для пошуку кореня за допомогою методу простої ітерації
    (define (canonical_view x) (sqrt (cos x))) ; визначаємо функцію канонічного вигляду
    (define (find_root x) ; визначаємо допоміжну функцію, для знаходження кореня
        (let ((xk (canonical_view x))) ; створюємо змінну, в яку записуємо нове xk
            (if (< (abs (- x xk)) e) ; якщо різниця між новим і старим хk менша за епсілон
                xk ; повертаємо
                (find_root xk) ; інакше, рекурсивно викликаємо
            )
        )
    )
    (find_root a) ; перший виклик допоміжної функції для пошуку кореню. Першою точкою береть початок відрізку
)

(define (broot_force a b e) ; визначаємо функцію для пошуку кореня за допомогою перебору
    (define (broot_force_times x) ; визначаємо допоміжну функцію для пошуку кореня за допомогою перебору
        (if (and (< (abs (equation x)) e) (<= x b)) ; значення в точці знаходиться достатньо близько до нуля, та точка не більша за кінец відрізку
            x ; повертаємо її
            (broot_force_times (+ x e)) ; викликаємо пошук заново, та збільшуємо х на крок е
        )
    )
    (broot_force_times a) ; перший виклик, перший х дорівнює початку відрізку
)

(let ((e 0.00000001) (a -1) (b 1)) ; визначаємо змінні, в які записуємо точність, початок та кінець пошукового відрізку
    (begin
        (let ((simple_iteration_root (simple_iteration a e)) (broot_force_root (broot_force a b e))) ; визначаємо змінні, в які записуємо корені, знайдені обома методами
            (begin
                (display "Корінь, знайдений при використанні простої ітерації: ")
                (display simple_iteration_root) ; виводимо корінь, знайдений методом простої ітерації
                (newline)
                (display "Корінь, знайдений при використанні перебору: ")
                (display broot_force_root) ; виводимо корінь, знайдений методом перебору
                (newline)
                (display "При заданих e, a, b ")
                (display e)
                (display ", ")
                (display a)
                (display ", ")
                (display b)
                (display " відповідно, ближчим є ")
                (if (< (- (equation broot_force_root) (equation simple_iteration_root)) 0) ; виводимо корінь, який є точнішим
                    (display broot_force_root)
                    (display simple_iteration_root)
                )
            )
        )
    )
)
