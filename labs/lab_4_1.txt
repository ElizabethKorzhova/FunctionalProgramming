(define (p/r) ; визначаємо функцію для читання з консолі
  (string->number (read-line))) ; читаємо з консолі, кастимо до числа та повертаємо

(define (is-divider num div) (= (modulo num div) 0)) ; визначаємо функцію, яка перевіряє, чи є одне число дільником іншого

(define (is-perfect-number num) ; визначаємо функцію, яка перевіряє, чи є числом досконалим числом
    (define (is-perfect-number-times s i) ; визначаємо допоміжну функцію, для хвостової рекурсії, яка приймає попередню суму та наступне натуральне число
        (if (<= i (quotient num 2)) ; якщо потенційний дільник менше ніж половина від потенційно досконалого числа
            (if (is-divider num i) ; тоді, якщо це число є дільником
                (is-perfect-number-times (+ s i) (+ i 1)) ; рекурсивно викликаємо допоміжну функція, збільшивши суму на цей дільник
                (is-perfect-number-times s (+ i 1)) ; інакше залишаємо суму незмінною
            )
            (= num s) ; інакше повертаємо результат перевірки, чи вийшла отримана сума дільників заданого числа рівной самому числу
        )
    )
    (is-perfect-number-times 1 2) ; перший виклик допоміжної функції с початковими параметрами
)

(define (is-factorial num) ; функція, якак перевіряє, чи є задане число факторіалом
    (define (is-factorial-times s k) ; допоміжна функція для хвостової рекурсії
        (if (< s num) ; якщо добуток попередніх натуральних чисел менший за перевіряєме число
            (is-factorial-times (* s k) (+ k 1)) ; рекурсивно викликаємо допоміжну функцію, помноживши добуток на поточне натуральне число
            (= num s) ; інакше, повертаємо результат перевірки, чи є отриманий добуток рівним самому число. В такому випадку, число є факторіалом
        )
    )
    (is-factorial-times 1 2) ; перший виклик допоміжної функції с початковими параметрами
)

(define (find-perfect-numbers) ; функція, яка шукає досконалі числа до 10000 включно
    (define (find-perfect-numbers-times pn i) ; допоміжна функція для хвостової рекурсії
        (if (< i 10001) ; якщо перевіряєме число менше за 10001
            (if (is-perfect-number i) ; тоді, якщо воно є досконалим
                (find-perfect-numbers-times (append pn (list i)) (+ i 1)) ; додаємо його до масиву досконалих чисел, та викликаємо рекурсивно допоміжну функцію
                (find-perfect-numbers-times pn (+ i 1)) ; не додаємо його до масиву донсконалих чисел, та викликаємо рекурсивно допоміжну функцію
            )
            pn ; інакше, повертаємо масив досконалих чисел
        )
    )
    (find-perfect-numbers-times (list) 2) ; початковий виклик допоміжної функції
)

(define (a arr) ; функція, яка шукає ті досконалі числа, які є факторіалами
    (define (a-times new-arr i) ; допоміжна функція для хвостової рекурсії
        (if (< i (length arr)) ; перебираємо масив досконалих чисел
            (if (is-factorial (list-ref arr i)) ; якщо досконале число є факторіалом
                (a-times (append new-arr (list (list-ref arr i))) (+ i 1)) ; додаємо це число до акумулюючого масиву
                (a-times new-arr (+ i 1)) ; не додаємо це число до акумулюючого масиву
            )
            new-arr ; повертаємо акумулюючий масив
        )
    )
    (a-times `() 0) ; початковий виклик допоміжної функції
)

(define (b pn factorials) ; функція, яка видаляє з масиву досконалих чисел ті числа, які є в масиві факторіалів
    (define (b-times new_arr i) ; допоміжна функція для хвостової рекурсії
        (if (< i (length factorials)) ; перебираємо масив факторіалів
            (b-times (delete (list-ref factorials i) new_arr) (+ i 1))  ; рекурсивно викликаємо допоміжну функцію, видаливши з неї число з масиву факторіалів
            new_arr ; повертаємо масив досконалих чисел без факторіалів, коли перебрали всі числа, які є у масиві факторіалів
        )
    )
    (b-times pn 0) ; початковий виклик допоміжної функції
)

(define (c pn n) ; функція, яка шукає ті досконалі числа, остання цифра яких дорівнює n
    (define (c-times new-arr i) ; допоміжна функція для хвостової рекурсії
        (if (< i (length pn)) ; перебираємо масив досконалих чисел
            (if (= (modulo (list-ref pn i) 10) n) ; якщо поточне досконале число має останню цифру n
                (c-times (append new-arr (list (list-ref pn i))) (+ 1 i)) ; додаємо його до акумулюючого масиву
                (c-times new-arr (+ 1 i)) ; не додаємо його до акумулюючого масиву
            )
            new-arr ; повертаємо акумулюючий масив
        )
    )
    (c-times `() 0) ; початковий виклик допоміжної функції
)

(let ((pn (find-perfect-numbers)) (n (p/r))) ; задання змінних масиву досконалих чисел, та числа n
    (let ((factorials (a pn))) ; задання зміної досконалих чисел-факторіалів
        (display "Досконалі числа до 10000 - ")
        (display pn)
        (newline)
        (display "Кількість досконалих чисел до 10000 - ")
        (display (length pn))
        (newline)
        (display "Досконалі числа до 10000, які є факторіалом - ")
        (display factorials)
        (newline)
        (display "Досконалі числа до 10000, які не є факторіалом - ")
        (display (b pn factorials))
        (newline)
        (display "Досконалі числа до 10000, остання цифра яких дорівнює ")
        (display n)
        (display " - ")
        (display (c pn n))
        (newline)
    )
)