; Мною було вирішено не зчитувати весь файл одразу, а читати його по слова, оскільки перший варіант може використати недосяжно великий об'єм пам'яті, при обробці великих файлів. Цей метод теж потребує доопрацювання, оскільки, якщо між словами стоїть декілька символів, всі після першого просто зникають.

(let ((dict (list "ing" "es" "ed" "s" "d" "t"))) ; задамо список закінченнь. Щоб видалити найбільше закінчення, цей список потрібно правильно задати. Найбільший пріорітет у того закінчення, у якого найменший індекс
    (define out1 (open-output-file "/myfiles/input.txt")) ; відкриємо порт для запису у файл
    (define (remove-ending-from-word word) ; функція, що видаляє зі слова закінчення зі списку заданих
        (define (endings-loop i) ; фукція, що імітує цикл для перебору закінчень
            (if (= i (length dict)) ; якщо дойшли до кінця списку закінчень і не знайшли співпадіння
                word ; повертаємо слово незмінним
                (if (and (> (string-length word) (string-length (list-ref dict i))) (string=? (list-ref dict i) (substring word (- (string-length word) (string-length (list-ref dict i))) (string-length word)))) ; якщо закінчення співпадає з закінчення слова
                    (substring word 0 (- (string-length word) (string-length (list-ref dict i)))) ; видаляємо його зі слова та повертаємо
                    (endings-loop (+ 1 i)) ; інакше переходимо до наступного закінчення
                )
            )
        )
        (endings-loop 0)
    )
    (define in (open-input-file "/myfiles/input.txt")) ; відкриваємо порт для читання з файлу
    (define out (open-output-file "/myfiles/output.txt")) ; відкриваємо порт для запису у файл
    (define (read-file word char) ; визначаємо функцію, що прочитає файл, видалить всі закінчення та запише відформатовані слова у новий файл
        (if (eof-object? char) ; якщо дійшли до кінця файлу
            (begin
                (display word) ; виводимо останнє слово
                (display (remove-ending-from-word word) out) ; видаляємо з нього закінчення та записуємо у файл
                (display "\nEnd Of File") ; виводимо, що дочитали до кінця файлу
            )
            (begin ; інакше
                (display word) ; виводимо нове слово
                (display char) ; та виводимо символ за ним. З цією реалізацією тільки один, тому деякі символи можуть пропадати, наприклад, пробіл після коми чи крапки
                (display (remove-ending-from-word word) out) ; видаляємо закінчення зі слова та записуємо у файл
                (display char out) ; записуємо наступний за словом символ у файл
                (read-file (symbol->string (read in)) (read-char in)) ; переходимо до наступного слова
            )
        )
    )
    ; записуємо початкові дані у файл для майбутнього читання
    (display "Most individuals don't think about numbers, or numerical representations of quantity, but they play a major\npart in everyday life. To be sure, numbers determine the time individuals will wake up in the morning, how\nmuch money employees earn per hour, what day of the year it is, and much, much more. Additionally, numbers impact everyday living on a much smaller scale. In the grocery store, for instance,\nnumbers determine products' prices, the amount of a product available for purchase, how much money\nwill need to be paid for products, and a whole lot else." out1)
    (close-output-port out1) ; закриваємо порт для запису у початковий файл
    (read-file (symbol->string (read in)) (read-char in)) ; починаємо читати слова з файлу та обробляти їх
    (close-input-port in) ; закриваємо порт для читання
    (close-output-port out) ; закриваємо порт для запису