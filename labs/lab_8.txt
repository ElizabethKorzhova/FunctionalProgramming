(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2) (list '+ a1 a2))
(define (make-product m1 m2) (list '* m1 m2))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))

(define (deriv exp var)
  (cond ((number? exp) 0)
    ((variable? exp)
     (if (same-variable? exp var) 1 0))
    ((sum? exp)
     (make-sum (deriv (addend exp) var)
               (deriv (augend exp) var)))
    ((product? exp)
     (make-sum
       (make-product (multiplier exp)
                     (deriv (multiplicand exp) var))
       (make-product (deriv (multiplier exp) var)
                     (multiplicand exp))))
    (else
     (display "unknown expression type - DERIV" ))))

(define (poly-array-to-symbolic arr)
    (define (pats-t sym-poly i)
        (if (= i (length arr))
            sym-poly
            (pats-t (make-sum (list-ref arr i) (make-product 'x sym-poly)) (+ 1 i))
        )
    )
    (pats-t (list-ref arr 0) 1)
)

(define out (open-output-file "/myfiles/poly.txt")) ; відкриваємо порт для запису у файл

(let ((poly (list 3 4 5 3 5 -3 2 -5 -6)))
    (let ((s_poly (poly-array-to-symbolic poly)))
        (let ((first_deriv (deriv s_poly 'x)))
            (let ((second_deriv (deriv first_deriv 'x)))
                (let ((third_deriv (deriv second_deriv 'x)))
                    (display s_poly out)
                    (display "\n\n" out)
                    (display first_deriv out)
                    (display "\n\n" out)
                    (display second_deriv out)
                    (display "\n\n" out)
                    (display third_deriv out)
                    (display "\n\n" out)
                    (close-output-port out)
                )
            )
        )

    )
)
