(define (deriv poly) ; функція, яка знаходить похідну
    (let ((new (make-list (- (length poly) 1))))
        (define (deriv-t i)
            (if (= i (length new))
                new
                (begin
                    (list-set! new i (* (list-ref poly i) (- (length new) i)))
                    (deriv-t (+ 1 i))
                )
            )
        )
        (deriv-t 0)
    )
)

(define (display-poly poly file) ; функція, яка записує поліном в файл
    (define (p-loop i)
        (if (= (length poly) i)
            (display "\n\n" file)
            (let ((coef (list-ref poly i)) (n (- (length poly) i 1)))
                (if (not (= coef 0))
                    (begin
                        (if (or (not (= i 0)) (< coef 0))
                            (if (< coef 0)
                                (display " - " file)
                                (display " + " file)
                            )
                        )
                        (display (abs coef) file)
                        (if (not (= n 0))
                            (begin
                                (display "x^" file)
                                (display n file)
                            )
                        )
                    )
                )
                (p-loop (+ 1 i))
            )
        )
    )
    (p-loop 0)
)

(define (poly-array-to-symbolic arr) ; функція, яка приводить поліном заданий масивом його коефіцієнтів до символьного виразу
    (define (pats-t sym-poly i)
        (if (= i (length arr))
            sym-poly
            (pats-t ('+ sym-poly (* (list-ref arr i) (pow x (- (length arr) i 1)))) (+ 1 i))
        )
    )
    (pats-t (list-ref arr 0) 1)
)

(define out (open-output-file "/myfiles/poly.txt")) ; відкриваємо порт для запису у файл

(let ((poly (list 3 0 4 5 3))) ; визначаємо поліном як список коефіцієнтів
    (let ((first_deriv (deriv poly))) ; шукаємо його першу похідну
        (let ((second_deriv (deriv first_deriv))) ; шукаємо другу першу похідну
            (let ((third_deriv (deriv second_deriv))) ; шукаємо третю першу похідну
                (display-poly poly out)
                (display-poly first_deriv out)
                (display-poly second_deriv out)
                (display-poly third_deriv out)
                (close-output-port out) ; закриваємо порт для запису у файл
            )
        )
    )
)