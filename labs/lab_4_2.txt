(let ((start_amount 35) (n 25) (p 8) (k 10) (m 6) (r 3) (s 0)) ; задання початкових змінних згідно умови завдання
    (define (cycle arr) ; функція, яка імітує лог автобусної зупинки
        (define (bus) ; функція, яка виводить дії, які були зроблені для 1 автобусу
            (begin
                (display "Приїхав автобус. На зупинці ")
                (display (length arr))
                (display " людей - ")
                (display arr)
                (newline)
                (display "В автобус сідає ")
                (display (min k (length arr)))
                (set! s (+ s (min k (length arr)))) ; рахуємо людей, які сіли до автобуса
                (set! arr (list-tail arr (min k (length arr)))) ; відіймаємо від масиву людей, які були на зупинці, тих, які сіли в автобус
                (display " людей. На зупинці залишається ")
                (display (length arr))
                (display " людей - ")
                (display arr)
                (display ". Автобус поїхав\nПоки новий автобус, на зупинку приходить ще ")
                (display p)
                (display " людей - ")
                (set! arr (append arr (iota p (+ 1 (if (> (length arr) 0) (last arr) -1))))) ; додаємо людей, які прийшли на зупинку, поки їхав наступний автобус
                (display arr)
                (newline)
                (newline)
                (display "Пройшло ")
                (display n)
                (display " хв.\n\n")
            )
        )
        (define (bus-times bus-count) ; допоміжна функція, яка імітує повний цикл проїзду автобусі
            (if (< bus-count 1) ; якщо автобусів не залишилось
                (display "Цикл завершено.\n\n") ; виводимо, що цикл завершено
                (begin
                    (bus) ; інакше, їде наступний автобус
                    (bus-times (- bus-count 1)) ; рекурсивно викликаємо допоміжну функцію, зменшивши кількість автобусів на 1
                )

            )
        )
        (define (cycle-times t) ; допоміжна функція, яка імітує всі цикли за робочий день
            (if (< t 1) ; якщо циклів не залишилось
                (begin ; виводимо, що робочий день завершено, та підсумок за цей день
                    (display "Робочий день завершено. За ")
                    (display r)
                    (display " цикли(ів) ")
                    (display m)
                    (display " автобусів, які вміщають в себе ")
                    (display k)
                    (display " пасажирів, перевезли ")
                    (display s)
                    (display " людей, якщо спочатку на зупинці було ")
                    (display start_amount)
                    (display " людей, та кожні ")
                    (display n)
                    (display " хвилин підходило ще ")
                    (display p)
                )
                (begin
                    (bus-times m) ; викликаємо функція, яка імітує повний цикл всіх автобусів
                    (cycle-times (- t 1)) ; рекурсивно викликаємо допоміжну функцію, що імітує всі цикли за робочий день, зменшивши на одиницю кількість циклів
                )
            )
        )
        (cycle-times r) ; первий виклик допоміжної функції, яка імітує всі цикли за робочий день
    )
    (cycle (iota start_amount)) ; виклик функції, яка імітує лог автобусної зупинки
)