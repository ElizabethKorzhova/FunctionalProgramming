(define (numer x) (car x)) ; визначаємо функцію, яка дійстає перший елемент з пари, тобто чисельник
(define (denom x) (cdr x)) ; визначаємо функцію, яка дійстає другий елемент з пари, тобто знаменник
(define (make-rat n d) (cons n d)) ; визначаємо функцію, яка створю пару, тобто дріб в нашому випадку

(define (print-rat x) ; визначаємо функцію, яка зображає пару чисел в вигляді дробу
  (display (numer x)) ; виводимо чисельник
  (display "/") ; виводимо /
  (display (denom x)) ; виводимо знаменник
)

(define (print-rats arr) ; визначаємо функцію, яка приймає arr - масив дробів. Дана функція виводить всі дроби.
    (define (print-rats-times index) ; визначаємо допоміжну функцію, яка приймає index - індекс елемента в масиві
        (if (< index (length arr)) ; поки індекс елемента менше довжини масиву
            (begin ; початок багатострокового коду
                (print-rat (list-ref arr index)) ; рекурсивно викликаємо головну функцію, в яку передаємо елемент з масиву arr під індексом index
                (if (< index (- (length arr) 1)) ; якщо index < ніж довжина масиву - 1
                    (display ", ") ; виводимо ,
                )
                (print-rats-times (+ 1 index)) ; інакше рекурсивно викликаємо  допоміжну функцію, передавши значення індексу збільшеного на 1
            )
        )
    )
    (print-rats-times 0) ; перший виклик допоміжної функції, передаємо значення індексу 0
)

(define (gcd a b) ; визначаємо функцію, яка приймає а, b - числа, знаходить НСД за алгоритмом Евкліда
    (if (= 0 b) ; якщо b = 0
        a ; повертаємо a
        (gcd b (modulo a b)) ;  рекурсивно викликаємо функцію передавши в другий параметр остачу від діння а на b
    )
)


(define (is-irreducible-fraction num) ; визначаємо функцію, яка приймає num - дріб, перевіряє чи не число нескоротним
    (let ((a (numer num)) (b (denom num))) ; визначаємо змінні в які записуємо чисельник та знаменник, знайдені за допомогою функцій numer та denom
        (if (< a b) ; якщо a < b
            (= 1 (gcd b a)) ; викликаємо функцію gcd передавши першим параметром b, другим а, якщо НСД = 1, то робимо висновок, що число є нескоротним
            (= 1 (gcd a b)) ; викликаємо функцію gcd передавши першим параметром а, другим b, та перевіряємо чи є число нескоротним
        )
    )
)

(define (find-irreducible-fractions arr) ; визначаємо функцію, яка приймає arr - масив дробів, та шукає всі нескоротні дроби
    (define (fifc-times acc-arr index) ; визначаємо допоміжну функцію, яка приймає acc-arr-масив, index - індекс елемента в масиві
        (if (< index (length arr)) ; поки індекс елемента менше довжини масиву
            (if (is-irreducible-fraction (list-ref arr index)) ; якщо число є нескоротним (викликаємо функцію is-irreducible-fraction яка це перевіряє, передавши їй елемент масиву arr під індексом index)
                (fifc-times (append acc-arr (list (list-ref arr index))) (+ 1 index)) ; рекурсивно викликаємо допоміжну функцію, додавши в список acc-arr новий дріб, та збільшивши індек на 1
                (fifc-times acc-arr (+ 1 index)) ; інакше рекурсивно викликаємо допоміжну функцію, збільшивши індек на 1
            )
            acc-arr ; повертаємо acc-arr
        )
    )
    (fifc-times (list) 0) ; перший виклик допоміжної функції, передаємо пустий список
)

(let ((arr (list (make-rat 2 3) (make-rat 8 4) (make-rat 9 3) (make-rat 9 4))))  ; визначаємо змінну, в яку записуємо список дробів
    (let ((irr-fracs (find-irreducible-fractions arr)))  ; визначаємо змінну, в яку записуємо список дробів, які є нескоротними
        (display "Серед раціональних чисел у вигляді дробу - [")
        (print-rats arr)
        (display "] - є ")
        (display (length irr-fracs))
        (display " нескоротних дробів - [")
        (print-rats irr-fracs)
        (display "]")
    )
)
